 时间限制：1秒 
 空间限制：32768K 
 热度指数：248978 
 
 一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。
 
 
 1版：
 # -*- coding:utf-8 -*-
class Solution:
    def jumpFloorII(self, number):
        # write code here
        def jc(n):
            result=1
            if n==0:
                return 1
            else:
                for i in range(1,n+1):
                    result=result*i
                return result
        count=0
        for i in range(number):
            count+=jc(number-1)/jc(number-i-1)/jc(i)
        return count
        
        注意：
        1.这题最复杂的算法是排列组合的算法。设跳上n阶台阶有f(n)种跳法，
        那么，可以视为：在n个人的n-1个缝隙中插椅子问题，椅子的个数从1到n-1，
        把所有情况的值累加，得到的就是f(n)的值。
        例如：
        n=4,f(n)=C(0,3)+C(1,3)+C(2,3)+C(3,3)
        得：
        f(n)=∑C(i,n-1),其中，0<=i<=n-i。
        
        2.因为n级台阶，第一步有n种跳法：跳1级、跳2级、到跳n级
        跳1级，剩下n-1级，则剩下跳法是f(n-1)
        跳2级，剩下n-2级，则剩下跳法是f(n-2)
        所以f(n)=f(n-1)+f(n-2)+...+f(1)
        因为f(n-1)=f(n-2)+f(n-3)+...+f(1)
        所以f(n)=2*f(n-1) 
        
        3. 每个台阶都有跳与不跳两种情况（除了最后一个台阶），最后一个台阶必须跳。所以共用2^(n-1)中情况 
                                   ORZ  ORZ
          
        4.实际上，列出几项，会发现，f(n)=2*f(n-1),很显然，直接递推。
        
        5.上式再度简化，得：
              f(n)=2^(n-1)
        qtmd！
        
        6.可以利用上一次返回值进行位移操作，速度更快。
        
